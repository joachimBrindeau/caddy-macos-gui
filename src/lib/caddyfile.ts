// Simple Caddyfile parser and builder
export interface Site {
  domain: string
  port: number
}

export function parseCaddyfile(content: string): Site[] {
  const sites: Site[] = []
  const lines = content.split('\n')
  
  let currentDomain = ''
  
  for (const line of lines) {
    const trimmed = line.trim()
    
    // Skip comments and empty lines
    if (!trimmed || trimmed.startsWith('#')) continue
    
    // Domain line (no indentation)
    if (!line.startsWith(' ') && !line.startsWith('\t') && trimmed.endsWith('{')) {
      currentDomain = trimmed.replace('{', '').trim()
    }
    
    // Reverse proxy line (indented)
    if (currentDomain && trimmed.startsWith('reverse_proxy')) {
      const match = trimmed.match(/localhost:(\d+)/)
      if (match) {
        sites.push({
          domain: currentDomain,
          port: parseInt(match[1])
        })
        currentDomain = ''
      }
    }
  }
  
  return sites
}

export function buildCaddyfile(sites: Site[]): string {
  const header = '# Caddy configuration for local development\n# Generated by Caddy GUI\n\n'
  
  const siteConfigs = sites.map(site => 
    `${site.domain} {\n    reverse_proxy localhost:${site.port}\n}`
  ).join('\n\n')
  
  return header + siteConfigs
}